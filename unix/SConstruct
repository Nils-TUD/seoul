# -*- Mode: Python -*-

import subprocess

archchk = subprocess.Popen(['uname', '-m'], stdout=subprocess.PIPE, stderr=None)
arch = 'x86_64' if archchk.communicate()[0].rstrip() == "x86_64" else 'x86_32'

env = Environment(CPPPATH = ['../include', "include"],
                  LINKFLAGS = '-g',
                  CCFLAGS = ' -march=native -g -fno-strict-aliasing -Wall -Wextra -Wno-unused-parameter -Wno-parentheses',
                  CXXFLAGS = '-std=gnu++11 -fno-rtti -fno-exceptions')

cc   = ARGUMENTS.get('cc')
cxx  = ARGUMENTS.get('cxx')

if cc:
    print("CC forced to '%s'." % cc)
    env['CC'] = cc

if cxx:
    print("CXX forced to '%s'." % cxx)
    env['CXX'] = cxx


# Add flag to env[key] if the compiler is able to build an object file
# with this. extension can be '.c' or '.cc'.
def AddOptionalFlag(context, extension, key, flag):
    context.Message('Check if compiler supports "%s"... ' % flag)
    old_var = context.env[key];
    context.env[key] += ' ' + flag + ' '
    result = context.TryCompile('', extension)
    context.Result(result)
    if not result:
        context.env[key] = old_var
    return result

conf = Configure(env, custom_tests = {'AddOptionalFlag' : AddOptionalFlag})

conf.AddOptionalFlag('.cc', 'CCFLAGS', '-Wno-constant-logical-operand')

# Link with rt library when needed.
if not conf.CheckFunc('timer_create'):
    if conf.CheckLib('rt'):
        if not conf.CheckFunc('timer_create'):
            print ("POSIX timer API seems broken.")
            Exit(1)
    else:
            print ("POSIX timer API where art thou?")
            Exit(1)
env = conf.Finish()

AlwaysBuild(Command('version.inc', [], """( git describe --dirty --long --always || echo UNKNOWN ) | sed 's/^\\(.*\\)$/"\\1"/' > $TARGET"""))


Precious(env.Command(["../executor/instructions.inc"], ["../executor/build_instructions.py"], "$SOURCE > $TARGET"))



# Build register handling functions for Intel 82576vf model
for f in ['mmio', 'pci']:
    env.Command('../include/model/intel82576vf%s.inc' % f, ['../model/intel82576vf/genreg.py', '../model/intel82576vf/reg_%s.py' % f],
                     '${SOURCES[0]} ${SOURCES[1:]} ${TARGET}')

verbose = ARGUMENTS.get('VERBOSE',0)
if int(verbose) == 0:
    env['CCCOMSTR'] = "CC $TARGET"
    env['CXXCOMSTR'] = "CXX $TARGET"
    env['LINKCOMSTR'] = "LD $TARGET"

debug = ARGUMENTS.get('DEBUG',0)

halienv = env.Clone()
halienv.Append(CXXFLAGS = ' -O3' if not debug else ' -O1')
halifax = halienv.Object('../executor/halifax.cc')

env.Append(CXXFLAGS = ' -O3' if not debug else ' -O0')
sources = Glob('*.cc') + [
    '../model/memorycontroller.cc',
    '../model/nullio.cc',
    '../model/pic8259.cc',
    '../model/pit8254.cc',
    '../model/sysctrlport.cc',
    '../model/keyboardcontroller.cc',
    '../model/ps2keyboard.cc',
    '../model/ps2mouse.cc',
    '../model/rtc146818.cc',
    '../model/serial16550.cc',
    '../model/sink.cc',
    '../model/vga.cc',
    '../model/rtl8029.cc',
    '../model/ahcicontroller.cc',
    '../model/satadrive.cc',
    '../executor/vbios_disk.cc',
    '../executor/vbios_keyboard.cc',
    '../executor/vbios_mem.cc',
    '../executor/vbios_multiboot.cc',
    '../executor/vbios_reset.cc',
    '../executor/vbios_time.cc',
    '../model/ioapic.cc',
    '../model/pcihostbridge.cc',
    '../model/pmtimer.cc',
    '../model/vcpu.cc',
    '../model/vbios.cc',
    '../model/lapic.cc',
    '../model/msi.cc',
    '../host/hostkeyboard.cc',
]
# TODO not yet ported
if arch == 'x86_32':
	sources += '../model/intel82576vf.cc'

seoul = env.Program('seoul', sources + halifax, LIBS = ['pthread', 'rt', 'X11'])
Default(seoul)

# EOF
